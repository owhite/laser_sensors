#include <i2c_t3.h>
#include <Sound.h>
#include <Throb.h>
#include "RunningAverage.h"
#include <laser_systems.h>

#define S_IDLE                1
#define S_REPORT              2
#define S_SETPINS             3
#define S_MAKE_ACTIVATE_SOUND 8
#define S_SHUTDOWN            9

#define SPK_PIN 20
#define MCU_PIN 14
#define LED_PIN 13
#define OUTPUT_RANGE 12

int state = S_IDLE;

Sound sound(SPK_PIN);
Throb throb(LED_PIN);

void receiveDataPacket(size_t howMany){
  masterCommand = Wire.read();          

  inputSize = howMany;
  inputBuf[0] = '\n';
  int i;
  for (i = 0; i < howMany - 1; i++) {
    inputBuf[i] = Wire.read();
    if (i > 19) { break; }
  }
  inputBuf[i+1] = '\n';

  switch (masterCommand) {
  case CMD_DONOTHING:
    state = S_IDLE;
    break;
  case CMD_REPORT:
    state = S_REPORT;
    break;
  case CMD_SETPINS:
    state = S_SETPINS;
    break;
  case CMD_ACTIVATE:
    state = S_MAKE_ACTIVATE_SOUND;
    break;
  case CMD_SHUTDOWN:
    state = S_SHUTDOWN;
    break;
  default:
    // unknown state
    break;
  }

  masterCommand = CMD_DONOTHING;    
  lastReceive = millis();
}

void requestEvent() { Wire.write(outputBuf,PACKET_LEN); }

void setup() {
  Serial.begin(SERIAL_SPEED);

  outputBuf[0] = PACKET_START;   outputBuf[5] = PACKET_STOP;
  outputBuf[1] = 0; outputBuf[2] = 0;
  outputBuf[3] = 0;  outputBuf[4] = 0;

  for(int i=0; i < OUTPUT_RANGE; i++){
    pinMode(i, OUTPUT);
    digitalWrite(i, LOW);
  }

  pinMode(MCU_PIN, OUTPUT);
  digitalWrite(MCU_PIN, LOW);

  Wire.begin(I2C_SLAVE, RELAYDRIVER_SLAVE_ADDRESS, I2C_PINS_18_19,
	     I2C_PULLUP_EXT, 400000);
  Wire.onReceive(receiveDataPacket); 
  Wire.onRequest(requestEvent);
}

void loop() {
  if (throb.pulseOnTimer(lastReceive == false)) {
  }

  switch (state) {
  case S_IDLE:
    state = S_IDLE;
    break;
  case S_SETPINS:
    if (OUTPUT_RANGE + 1 == inputSize) {
      for(int i = 0; i < inputSize; i++) {
	digitalWrite(i, (inputBuf[i] == 1) ? HIGH : LOW);
      }
    }
    state = S_IDLE;
    break;
  case S_REPORT:
    Serial.printf("REPORT: %d :: %d\n", masterCommand, inputSize);
    for(int i = 0; i < inputSize; i++) {
      Serial.printf("%d", inputBuf[i]);
    }
    Serial.println();
    state = S_IDLE;
    break;
  case S_MAKE_ACTIVATE_SOUND:
    sound.ray_gun();
    state = S_IDLE;
    break;
  case S_SHUTDOWN:
    sound.tweetOFF();
    for(int i=0; i < OUTPUT_RANGE; i++){
      digitalWrite(i, LOW);
    }
    state = S_IDLE;
    break;
  default:
    // unknown state
    break;
  }
}



